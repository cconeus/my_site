<?php

  function cipher_menu() {
    $items = array();
    $items['cipher'] = array(
      'title' => 'Shift Cipher',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cipher_form'),
      'access callback' => TRUE,
      'type' => MENU_NORMAL_ITEM,
    );

    $items['cipher_success_page'] = array(
      'title' => 'Success',
      'page callback' => 'cipher_success',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    );
    return $items;
  }

  function cipher_form() {
    $form['shift_value'] = array(
      '#title' => 'Shift value',
      '#type' => 'textfield',
      '#description' => t('Enter Shift Value here'),
      '#element_validate' => array('element_validate_integer_positive', 'element_validate_range'),
      '#required' => TRUE,
    );

    $form['shift_direction'] = array(
      '#title' => 'Shift direction',
      '#type' => 'textfield',
      '#description' => t('Enter the direction you\'d like to shift in.'),
      '#element_validate' => array('element_validate_direction'),
      '#required' => TRUE,
    );

    $form['shift_phrase'] = array(
      '#title' => 'Shift phrase',
      '#type' => 'textfield',
      '#description' => t('Enter the phrase you\'d like shifted.'),
      '#element_validate' => array('element_validate_characters'),
      '#required' => TRUE,
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Shift',
    );

    return $form;
  }

  function element_validate_direction($element) {
    $info = strtolower($element['#value']);
    if(!in_array($info, array('left', 'right'))) {
      form_error($element, t('Please enter left or right for your shift direction.'));
    }
  }

  function element_validate_characters($element) {
    if(!preg_match('/[A-Za-z!.?, ]/', $element['#value'])) {
      form_error($element, t('Your phrase rates at a 10 out of 10 on the weakness scale. Please refrain from using special characters. Letters and basic punctuation only please!'));
    }
  }

  function element_validate_range($element) {
    if ($element['#value'] > 25 || $element['#value'] < 1) {
      form_error($element, t('Number must be between 1-25. Wouldn\'t make much sense to do negative right shifts, or positive left shifts now would it.'));
    }
  }

  function cipher_form_submit($form, &$form_state) {
    $shift_value = $form_state['values']['shift_value'];
    $shift_direction = $form_state['values']['shift_direction'];
    $shift_phrase = $form_state['values']['shift_phrase'];
    dpr($shift_phrase, $return = FALSE, $name = NULL);
    $shift_direction_scrub = strtolower($shift_direction);

    $exp_phrase = str_split($shift_phrase);

    if($shift_direction_scrub == 'left') {
      $shift_value = $shift_value * -1;
    }

    $i = 0;
    foreach($exp_phrase as $letter) {
      $code = ord($letter);
      if(preg_match('/[A-Za-z]/', $letter)) {


        if($code >= 97 && $code <= 122) {
          $new_ascii = $code + $shift_value;

          if($new_ascii < 97) {
            $recall = $new_ascii - 97;
            $new_ascii = 123 + $recall;
          }

          if($new_ascii > 122) {
            $recall = $new_ascii - 122;
            $new_ascii = 96 + $recall;
          }
        }

        if($code >= 65 && $code <= 90) {
          $new_ascii = $code + $shift_value;

          if($new_ascii < 65) {
            $recall = $new_ascii - 65;
            $new_ascii = 91 + $recall;
          }

          if($new_ascii > 90) {
            $recall = $new_ascii - 90;
            $new_ascii = 91 + $recall;
          }

        $exp_phrase[$i] = chr($new_ascii);
        }
      }
        else {
          $i++;
        }
      }

      $new_phrase = implode($exp_phrase);
      $_SESSION['output'] = $new_phrase;
      $form_state['redirect'] = 'cipher_success_page';
    }

    function cipher_success() {
      $new_phrase = $_SESSION['output'];
      return $new_phrase;
    }
